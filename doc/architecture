Contents

  1.  Abstract
  2.  Overview
  3.  Application
    3.1.  Compilation Unit (Module)
    3.2.  Application Entry Point
  4.  External Dependencies
    4.1.  Interface File
    4.2.  Binary Blob
  5.  Runtime
    5.1.  Executor
      5.1.1.  Execution Environment
    5.2.  Updater
      5.2.1.  Update Spot
      5.2.2.  Incremental Patch
      5.2.3.  Complete Patch


1. Abstract

  This document reflects the internal architecture of the nessy framework. It
  is a a technical documentation of all implementations inside the framework.


2. Overview

  +-----------------------+
  | External Dependencies |
  |      (Libraries)      |
  +-----------------------+
            ^
            |
            |
      +-------------+
      | Application |
      |  (Modules)  |
      +-------------+
            ^
            |
            |
  +----------------------+
  |       Runtime        |
  | (Updater, Execution) |
  +----------------------+

  In the center of this framework stands an application. An application
  consists of several compilation units (named modules). It might have or might
  not have dependencies on external libraries. The runtime creates an loads and
  runs the application and its external dependencies.


3. Application

  An application is a bundle of compilation units and a listing of external
  dependencies. It can be run with the help of the runtime.


  3.1. Compilation Unit (Module)

    A compilation unit is a single file forming a part of a program. A module
    is a compilation unit. A compilation unit has dependencies on other
    compilation units.


  3.2. Application Entry Point

    The applicatin entry point is the function at which the execution of the
    program begins. In this framework it is the function `Main.main`. So there
    must be a module named `Main` which exports a symbol named `main`.

    The main function's signature must match:

        main :: IO ()


4. External Dependencies

  An external dependency (or library) is a collection of modules that cannot be
  executed standalone. They provide functionality for applications and other
  libraries. A library consists of an interface file and a binary blob.


    4.1. Interface File

      An interface file contains signatures of functions and defined data
      types.


    4.2. Binary Blob

      The binary blob of a library contains the implementation of functions in
      binary form.


5. Runtime

  The runtime handles the execution of the application. If the application
  configures an update spot, the runtime will try to check for a new version.
  If there is a new version the updater downloads all available patches. The
  downloaded updates will be installed the next time the application starts.


  5.1. Execution

    During execution the runtime loads all components of the application and
    the components of the applications external dependencies. After loading the
    components the runtime sets up an execution environment for the application.


    5.1.1. Execution Environment

      The execution environment contains all symbols that are in scope inside
      the main module. The process of setting the execution environment up
      includes loading of external symbols into the scope of the main module.


  5.2. Updater

    The updater is a component inside the runtime that may be configured in an
    application. It can download updates from an update spot und patch the
    application.


    5.2.1. Update Spot

      An update spot provides updates (patches) for an application. Those
      patches may be incremental or complete.


    5.2.2. Incremental Patch

      An incremental patch changes only a few sections of the application.


    5.2.3. Complete Patch

      A complete patch replaces the whole application as is.

